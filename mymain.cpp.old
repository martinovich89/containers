#include <cstdlib>
#include <iostream>
#include <string>

#ifdef __STL__
 namespace ft = std;
# include <vector>
#else
# include "vector.hpp"
#endif

typedef struct s_max_size_test
{
	size_t a;
	size_t b;
	int		c[42];
}	t_max_size_test;

int main(void)
{

	// ft::vector<short> my_vector0;
	// ft::vector<int> my_vector1;
	// ft::vector<t_max_size_test> my_vector3;

	// my_vector0.push_back(42);
	// my_vector0.push_back(21);
	// const ft::vector<short> my_vector2(my_vector0);

	// std::cout << my_vector0.max_size() << " | " << (size_t)~0 / (sizeof(short) * 2) << std::endl;
	// std::cout << my_vector1.max_size() << " | " << (size_t)~0 / (sizeof(int) * 2) << std::endl;
	// std::cout << my_vector2.max_size() << " | " << (size_t)~0 / (sizeof(short) * 2) << std::endl;
	// std::cout << my_vector3.max_size() << " | " << (size_t)~0 / (sizeof(t_max_size_test) * 2) << std::endl;

	// ft::vector<short>::iterator iter;
	// iter = my_vector0.begin();
	// std::cout << *iter << std::endl;


/*	my_vector1.push_back(42);
	ft::vector<int>::reverse_iterator riter;
	riter = my_vector1.rbegin();
	std::cout << "kekw" << std::endl;
	std::cout << *riter << std::endl;

	ft::vector<short>::const_iterator citer;
	citer = my_vector2.begin();
	std::cout << *citer << std::endl;
*/

	ft::vector<short> vec0;
	ft::vector<int> vec1((size_t)10, 42);

/*	ft::vector<int>::iterator first(vec1.begin());
	ft::vector<int>::iterator last(vec1.end());

	ft::vector<int> vec2(first, last);*/

	ft::vector<int> vec2(vec1);

	ft::vector<int>::iterator iter(vec2.begin());
	std::cout << vec2.size() << std::endl;
	for (; iter != vec2.end(); iter++)
	{
		std::cout << *iter << std::endl;
	}
	std::cout << vec2.max_size() << std::endl;
	// std::cout << vec2.resize(2, 42);
	std::cout << vec2.size() << std::endl;
	std::cout << vec2.capacity() << std::endl;
	std::cout << vec2.empty() << std::endl;
	vec2.reserve(13);
	std::cout << vec2.capacity() << std::endl;

	const ft::vector<int> vector((size_t)4, 42);
	ft::vector<int>::const_iterator iter2 = vector.begin();

	while (iter2 != vector.end())
	{
		const_cast<int&>(*iter2) = 12;
		std::cout << *iter2 << std::endl;
		iter2++;
	}

	std::cout << vector.size() << std::endl;
	std::cout << vector.capacity() << std::endl;
	
	// ft::vector<const int>::const_iterator const_iter(const_vector.begin());
	// ft::vector<const int>::iterator iter(const_vector.begin());

	

	return (0);
}